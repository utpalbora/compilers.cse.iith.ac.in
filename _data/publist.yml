- shortname: "mlcompilerbridge"
  title: "The Next 700 ML-Enabled Compiler Optimizations"    
  short_title: "ML-Compiler-Bridge"
  authors: "S. VenkataKeerthy, Siddharth Jain, Umesh Kalvakuntla, Pranav Sai Gorantla, Rajiv Shailesh Chitale, Eugene Brevdo, Albert Cohen, Mircea Trofin, Ramakrishna Upadrasta"
  description: ""
  domain: "ML4Compilers"
  subdomain: "IR2Vec"
  year: "2024"
  publishedAt: "CC"
  project: 0
  publication: 1
  type: "Conference"
  # image: ""   
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/ml-compiler-bridge"
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: ""
  videos_link: ""
  arxiv_link: "https://arxiv.org/abs/2311.10800"

- shortname: "ml-llvm-tools"
  title: "ML-LLVM-Tools: Towards Seamless Integration of Machine Learning in Compiler Optimizations"    
  short_title: "ML-LLVM-Tools"
  authors: "Siddharth Jain, S. VenkataKeerthy, Umesh Kalvakuntla, Albert Cohen, Ramakrishna Upadrasta"
  description: ""
  domain: "ML4Compilers"
  subdomain: "IR2Vec"
  year: "2023"
  publishedAt: "EuroLLVM"
  project: 0
  publication: 1
  type: "Conference"
  # image: ""   
  highlight: 1
  github_link: ""
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: "https://llvm.org/devmtg/2023-05/slides/TechnicalTalks-May10/10-Venkat-ML-LLVM-Tools.pdf"
  videos_link: "https://www.youtube.com/watch?v=3RYPv27Tp6s"
  arxiv_link: ""


- shortname: "rl4real"
  title: "RL4ReAl: Reinforcement Learning for Register Allocation"    
  short_title: "RL4ReAl"
  authors: "S. VenkataKeerthy, Siddharth Jain, Anilava Kundu, Rohit Aggarwal, Albert Cohen, and Ramakrishna Upadrasta"
  description: ""
  domain: "ML4Compilers"
  subdomain: "IR2Vec"
  year: "2023"
  publishedAt: "CC"
  project: 0
  publication: 1
  type: "Conference"
  # image: ""   
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/ml-llvm-project/tree/mlbridge-lib/llvm/lib/CodeGen/MLRegAlloc"  
  citation: ""
  paper_link: "https://dl.acm.org/doi/abs/10.1145/3578360.3580273"
  poster_link: ""
  slides_link: "https://llvm.org/devmtg/2023-02-25/slides/RL4ReAl.pdf"
  videos_link: ""
  arxiv_link: "https://arxiv.org/abs/2204.02013"


- shortname: "bullseye"
  title: "BullsEye : Scalable and Accurate Approximation Framework for Cache Miss Calculation" 
  short_title: "BullsEye"   
  authors: "Nilesh Rajendra Shah, Ashitabh misra, Antoine Miné, Rakesh Venkat, and Ramakrishna Upadrasta"
  description: ""
  domain: "Polyhedral"
  year: "2022"
  publishedAt: "TACO"
  project: 1
  publication: 0
  type: "Conference"
  # image: ""   
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/bullseye"  
  citation: "@article{10.1145/3558003,
  author = {Shah, Nilesh Rajendra and Misra, Ashitabh and Miné, Antoine and Venkat, Rakesh and Upadrasta, Ramakrishna},
  title = {BullsEye : Scalable and Accurate Approximation Framework for Cache Miss Calculation},
  year = {2022},
  issue_date = {March 2023},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {20},
  number = {1},
  issn = {1544-3566},
  url = {https://doi.org/10.1145/3558003},
  doi = {10.1145/3558003},
  abstract = {For Affine Control Programs or Static Control Programs (SCoP), symbolic counting of reuse distances could induce polynomials for each reuse pair. These polynomials along with cache capacity constraints lead to non-affine (semi-algebraic) sets; and counting these sets is considered to be a hard problem. The state-of-the-art methods use various exact enumeration techniques relying on existing cardinality algorithms that can efficiently count affine sets.We propose BullsEye , a novel, scalable, accurate, and problem-size independent approximation framework. It is an analytical cache model for fully associative caches with LRU replacement policy focusing on sampling and linearization of non-affine stack distance polynomials. First, we propose a simple domain sampling method that can improve the scalability of exact enumeration. Second, we propose linearization techniques relying on Handelman’s theorem and Bernstein’s representation. To improve the scalability of the Handelman’s theorem linearization technique, we propose template (Interval or Octagon) sub-polyhedral approximations.Our methods obtain significant compile-time improvements with high-accuracy when compared to HayStack on important polyhedral compilation kernels such as nussinov, cholesky, and adi from PolyBench, and harris, gaussianblur from LLVM-TestSuite. Overall, on PolyBench kernels, our methods show up to 3.31\texttimes{} (geomean) speedup with errors below ≈ 0.08% (geomean) for the octagon sub-polyhedral approximation.},
  journal = {ACM Trans. Archit. Code Optim.},
  month = {nov},
  articleno = {2},
  numpages = {28},
  keywords = {Static analysis, performance analysis, cache model}
  }
  "
  paper_link: "https://dl.acm.org/doi/full/10.1145/3558003"
  poster_link: ""
  slides_link: "https://docs.google.com/presentation/d/e/2PACX-1vSFSYrGUOtBszJ4TPyFzz5RUNCvRJP3BJLCo54QsgGcRKZ18b7MqrjoMZjwhpWP8gbggm6DkfdVB3pD/pub?start=false&loop=false&delayms=3000"
  videos_link: ""
  arxiv_link: ""
  

- shortname: "rl_loop_distribution"   
  title: "Reinforcement Learning assisted Loop Distribution for Locality and Vectorization"
  short_title: "RL-LoopDistribution"   
  authors: "Shalini Jain, S. VenkataKeerthy, Rohit Aggarwal, Tharun Kumar Dangeti, Dibyendu Das, Ramakrishna Upadrasta"
  year: "2022"
  publishedAt: "LLVM-HPC"
  domain: "ML4Compilers"
  subdomain: "IR2Vec"
  project: 0
  publication: 1
  type: "Journal|Transaction|Conference"
  # image: ""   
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/ml-llvm-project/tree/mlbridge-lib/llvm/lib/Transforms/Scalar/IR2Vec-LOF/custom_loop_distribution"   
  citation: "" 
  paper_link: "https://ieeexplore.ieee.org/document/10026979" 
  poster_link: "" 
  slides_link: ""  
  videos_link: "" 
  arxiv_link: ""
 

- shortname: "packet_processing"       
  title: "Packet Processing Algorithm Identification using Program Embeddings"
  short_title: "Network Function Identification"   
  authors: "S. VenkataKeerthy, Yashas Andaluri, Sayan Dey, Rinku Shah, Praveen Tammana, Ramakrishna Upadrasta"
  year: "2022"
  publishedAt: "APNet"
  project: 0
  publication: 1
  type: "Workshop"
  domain: "ML4Compilers"
  subdomain: "IR2Vec"
  # image: ""   
  highlight: 1  
  github_link: ""  
  citation: "" 
  paper_link: "https://conferences.sigcomm.org/events/apnet2022/papers/Packet%20Processing%20Algorithm%20Identification%20using%20Program%20Embeddings1.pdf"  
  poster_link: ""  
  slides_link: "https://conferences.sigcomm.org/events/apnet2022/slides/apnet22/Packet%20Processing%20Algorithm%20Identification%20using%20Program%20Embeddings.pdf"  
  videos_link: "https://youtu.be/SI5JyidQJC4"
  arxiv_link: ""
 
  

- shortname: "posetrl"    
  title: "POSET-RL: Phase ordering for Optimizing Size and Execution Time using Reinforcement Learning"
  short_title: "POSET-RL"   
  authors: "Shalini Jain, Yashas Andaluri, S. VenkataKeerthy, Ramakrishna Upadrasta"
  year: "2022"
  publishedAt: "ISPASS"
  project: 1
  publication: 0
  type: "Conference"
  domain: "ML4Compilers"
  subdomain: "IR2Vec"
  # image: ""   
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/ml-llvm-project/tree/mlbridge-lib/llvm/lib/Transforms/IPO/PosetRL"
  citation: ""
  paper_link: "https://llvm.org/devmtg/2022-04-03/slides/POSET-RL.Phase.ordering.for.Optimizing.Size.and.Execution.Time.using.Reinforcement.Learning.pdf"
  poster_link: ""
  slides_link: ""
  videos_link: "https://youtu.be/_SqWd74zG2Y"
  arxiv_link: ""
  
 
 

- shortname: "llov"   
  title: "OpenMP aware MHP Analysis for Improved Static Data-Race Detection"
  short_title: "LLOV" 
  authors: "Utpal Bora, Shraiysh Vaishay, Saurabh Joshi, Ramakrishna Upadrasta"
  year: "2021"
  publishedAt: "LLVM-HPC"
  project: 1
  publication: 0
  type: "Journal|Transaction|Conference"
  # image: ""   
  highlight: 1
  github_link: "https://github.com/utpalbora/llov"
  citation: "@misc{https://doi.org/10.48550/arxiv.2111.04259,
  doi = {10.48550/ARXIV.2111.04259},
  
  url = {https://arxiv.org/abs/2111.04259},
  
  author = {Bora, Utpal and Vaishay, Shraiysh and Joshi, Saurabh and Upadrasta, Ramakrishna},
  
  keywords = {Programming Languages (cs.PL), Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences, D.1.3; D.2.4; D.2.5; D.3.4},
  
  title = {OpenMP aware MHP Analysis for Improved Static Data-Race Detection},
  
  publisher = {arXiv},
  
  year = {2021},
  
  copyright = {Creative Commons Attribution Non Commercial Share Alike 4.0 International}
  }
  "
  paper_link: "https://dl.acm.org/doi/10.1145/3418597"
  poster_link: ""
  slides_link: ""
  videos_link: ""
  arxiv_link: ""
  
 
 

- shortname: "polydl"    
  title: "AI Powered Compiler Techniques for DL Code Optimization" 
  authors: "Sanket Tavarageri, Gagandeep Goyal, Sasikanth Avancha, Bharat Kaul, Ramakrishna Upadrasta"
  year: "2021"
  publishedAt: "arXiv"
  project: 1
  publication: 0
  type: "Journal|Transaction|Conference"  
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/polydl"
  citation: ""
  paper_link: "https://dl.acm.org/doi/abs/10.1145/3433103"
  poster_link: ""
  slides_link: ""
  videos_link: "https://www.youtube.com/watch?v=kyD4ysn8ljE&t=1866s&ab_channel=HiPEACTV"
  arxiv_link: ""
  
 
 

- shortname: "polydl"    
  title: "PolyDL: Polyhedral Optimizations for Creation of High Performance DL primitives"
  short_title: "PolyDL" 
  authors: "Sanket Tavarageri, Alexander Heinecke, Sasikanth Avancha, Gagandeep Goyal, Ramakrishna Upadrasta, Bharat Kaul"
  description: ""
  year: "2020"
  publishedAt: "TACO"
  domain: "Compilers4ML"
  project: 1
  publication: 0
  type: "Conference"
  # image: ""  	
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/polydl"
  citation: "@article{10.1145/3433103,
  author = {Tavarageri, Sanket and Heinecke, Alexander and Avancha, Sasikanth and Kaul, Bharat and Goyal, Gagandeep and Upadrasta, Ramakrishna},
  title = {PolyDL: Polyhedral Optimizations for Creation of High-Performance DL Primitives},
  year = {2021},
  issue_date = {March 2021},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {18},
  number = {1},
  issn = {1544-3566},
  url = {https://doi.org/10.1145/3433103},
  doi = {10.1145/3433103},
  abstract = {Deep Neural Networks (DNNs) have revolutionized many aspects of our lives. The use of DNNs is becoming ubiquitous, including in software for image recognition, speech recognition, speech synthesis, language translation, to name a few. The training of DNN architectures, however, is computationally expensive. Once the model is created, its use in the intended application—the inference task, is computationally heavy too and the inference needs to be fast for real time use. For obtaining high performance today, the code of Deep Learning (DL) primitives optimized for specific architectures by expert programmers exposed via libraries is the norm. However, given the constant emergence of new DNN architectures, creating hand optimized code is expensive, slow and is not scalable.To address this performance-productivity challenge, in this article we present compiler algorithms to automatically generate high-performance implementations of DL primitives that closely match the performance of hand optimized libraries. We develop novel data reuse analysis algorithms using the polyhedral model to derive efficient execution schedules automatically. In addition, because most DL primitives use some variant of matrix multiplication at their core, we develop a flexible framework where it is possible to plug in library implementations of the same in lieu of a subset of the loops. We show that such a hybrid compiler plus a minimal library-use approach results in state-of-the-art performance. We develop compiler algorithms to also perform operator fusions that reduce data movement through the memory hierarchy of the computer system. Using Convolution Neural Network (CNN) models and matrix multiplication operations, we demonstrate that our approach automatically creates high performing DNN building blocks whose performance matches the performance of hand-crafted kernels of Intel’s oneDNN library on high end CPUs. At the same time, our techniques take only a fraction of time (1/20 or less) compared to AutoTVM, a deep learning auto-tuner to create optimized implementations.},
  journal = {ACM Trans. Archit. Code Optim.},
  month = {jan},
  articleno = {11},
  numpages = {27},
  keywords = {loop optimization, microkernels, data reuse, machine learning, Polyhedral compilation}
  }"
  paper_link: "https://dl.acm.org/doi/abs/10.1145/3433103"
  poster_link: ""
  slides_link: ""
  videos_link: "https://www.youtube.com/watch?v=kyD4ysn8ljE&t=1866s&ab_channel=HiPEACTV"
  arxiv_link: ""
 
- shortname: "ir2vec"
  title: "IR2Vec: A Flow Analysis based Scalable Infrastructure for Program Encodings"  
  short_title: "IR2Vec" 
  authors: "S. VenkataKeerthy, Rohit Aggarwal, Shalini Jain, Maunendra Desarkar, Ramakrishna Upadrasta and Y. N. Srikant"
  description: ""
  year: "2020"
  publishedAt: "TACO"
  project: 1
  publication: 0
  type: "Conference"
  domain: "ML4Compilers"
  # image: ""   
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/IR2Vec"
  citation: "@article{10.1145/3418463,
  author = {VenkataKeerthy, S. and Aggarwal, Rohit and Jain, Shalini and Desarkar, Maunendra Sankar and Upadrasta, Ramakrishna and Srikant, Y. N.},
  title = {IR2VEC: LLVM IR Based Scalable Program Embeddings},
  year = {2020},
  issue_date = {December 2020},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {17},
  number = {4},
  issn = {1544-3566},
  url = {https://doi.org/10.1145/3418463},
  doi = {10.1145/3418463},
  abstract = {We propose IR2VEC, a Concise and Scalable encoding infrastructure to represent programs as a distributed embedding in continuous space. This distributed embedding is obtained by combining representation learning methods with flow information to capture the syntax as well as the semantics of the input programs. As our infrastructure is based on the Intermediate Representation (IR) of the source code, obtained embeddings are both language and machine independent. The entities of the IR are modeled as relationships, and their representations are learned to form a seed embedding vocabulary. Using this infrastructure, we propose two incremental encodings: Symbolic and Flow-Aware. Symbolic encodings are obtained from the seed embedding vocabulary, and Flow-Aware encodings are obtained by augmenting the Symbolic encodings with the flow information.We show the effectiveness of our methodology on two optimization tasks (Heterogeneous device mapping and Thread coarsening). Our way of representing the programs enables us to use non-sequential models resulting in orders of magnitude of faster training time. Both the encodings generated by IR2VEC outperform the existing methods in both the tasks, even while using simple machine learning models. In particular, our results improve or match the state-of-the-art speedup in 11/14 benchmark-suites in the device mapping task across two platforms and 53/68 benchmarks in the thread coarsening task across four different platforms. When compared to the other methods, our embeddings are more scalable, is non-data-hungry, and has better Out-Of-Vocabulary (OOV) characteristics.},
  journal = {ACM Trans. Archit. Code Optim.},
  month = {dec},
  articleno = {32},
  numpages = {27},
  keywords = {heterogeneous systems, LLVM, intermediate representations, representation learning, compiler optimizations}
  }"
  paper_link: "https://dl.acm.org/doi/10.1145/3418463"
  poster_link: ""
  slides_link: ""
  videos_link: "https://www.youtube.com/watch?v=kyD4ysn8ljE&t=4688s&ab_channel=HiPEACTV"
  arxiv_link: "https://arxiv.org/abs/1909.06228"
 
  
- shortname: "llov"
  title: "LLOV: A Fast Static Data-Race Checker for OpenMP Programs"  
  short_title: "LLOV"  
  authors: "Utpal Bora, Santanu Das, Pankaj Kukreja, Saurabh Joshi, Ramakrishna Upadrasta, Sanjay Rajopadhye"
  description: ""
  year: "2020"
  publishedAt: "TACO"
  domain: "SA+Opt"
  project: 1
  publication: 0
  type: "Conference"
  # image: ""  
  highlight: 1
  github_link: "https://github.com/utpalbora/llov"
  citation: "@article{10.1145/3418597,
  author = {Bora, Utpal and Das, Santanu and Kukreja, Pankaj and Joshi, Saurabh and Upadrasta, Ramakrishna and Rajopadhye, Sanjay},
  title = {LLOV: A Fast Static Data-Race Checker for OpenMP Programs},
  year = {2020},
  issue_date = {December 2020},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {17},
  number = {4},
  issn = {1544-3566},
  url = {https://doi.org/10.1145/3418597},
  doi = {10.1145/3418597},
  abstract = {In the era of Exascale computing, writing efficient parallel programs is indispensable, and, at the same time, writing sound parallel programs is very difficult. Specifying parallelism with frameworks such as OpenMP is relatively easy, but data races in these programs are an important source of bugs. In this article, we propose LLOV, a fast, lightweight, language agnostic, and static data race checker for OpenMP programs based on the LLVM compiler framework. We compare LLOV with other state-of-the-art data race checkers on a variety of well-established benchmarks. We show that the precision, accuracy, and the F1 score of LLOV is comparable to other checkers while being orders of magnitude faster. To the best of our knowledge, LLOV is the only tool among the state-of-the-art data race checkers that can verify a C/C++ or FORTRAN program to be data race free.},
  journal = {ACM Trans. Archit. Code Optim.},
  month = {dec},
  articleno = {35},
  numpages = {26},
  keywords = {data race detection, OpenMP, program verification, polyhedral compilation, static analysis, shared memory programming}
  }

  "
  paper_link: "https://dl.acm.org/doi/10.1145/3418597"
  poster_link: ""
  slides_link: ""
  videos_link: "https://www.youtube.com/watch?v=kyD4ysn8ljE&t=3781s&ab_channel=HiPEACTV"
  arxiv_link: "https://arxiv.org/abs/1912.12189"
  
 
  

- shortname: "bpi_improvements"
  title: "Some Improvements to Branch Probability Information (BPI)" 
  authors: "Akash Banerjee, Rohit Aggarwal, S. VenkataKeerthy and Ramakrishna Upadrasta"
  description: ""
  year: "2020"
  publishedAt: "Euro LLVM Meet"
  project: 0
  publication: 1
  type: "Posters"
  # image: ""  
  highlight: 1
  github_link: "https://github.com/TIFitis/BPI--llvm"
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: ""
  videos_link: ""
  arxiv_link: ""
  
- shortname: "executable_size_reduction"
  short_title: "Executable Size Reduction"
  title: "An analysis of executable size reduction by LLVM passes" 
  authors: "Shalini Jain, Utpal Bora, Prateek Kumar, Vaibhav B Sinha, Suresh Purini and Ramakrishna Upadrasta"
  description: ""
  year: "2019"
  publishedAt: "CSI[ICT]"
  project: 0
  publication: 1
  domain: "SA+Opt"
  type: "Conference"
  # image: "" 
  highlight: 1
  github_link: ""
  citation: ""
  paper_link: "https://link.springer.com/article/10.1007/s40012-019-00248-5"
  poster_link: ""
  slides_link: ""
  videos_link: ""
  arxiv_link: ""
  
 
 

- shortname: "automatic_cache_exploitation"
  title: "Polyhedral Model Guided Automatic GPU Cache Exploitation Framework"   
  authors: "Abhishek A Patwardhan & Ramakrishna Upadrasta"
  description: ""
  year: "2019"
  publishedAt: "HPCS"
  project: 0
  domain: "Polyhedral"
  publication: 1
  type: "Conference"
  # image: ""   
  highlight: 1
  github_link: "https://github.com/abhishek111226/Texturizing-PPCG"
  citation: ""
  paper_link: "https://ieeexplore.ieee.org/document/9188095"
  poster_link: ""
  slides_link: ""
  videos_link: ""
  arxiv_link: ""
  
 
  

- shortname: "tightest_utvpi_over-approximation" 
  title: "Some Efficient Algorithms for the Tightest UTVPI Polyhedral Over-Approximation Problem"
  short_title: "UTVPI Over-approximation" 
  authors: "Abhishek A Patwardhan & Ramakrishna Upadrasta"
  description: ""
  year: "2019"
  publishedAt: "IMPACT"
  project: 0
  domain: "Polyhedral"
  publication: 1
  type: "Conference"
  # image: ""  
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/ISL-UTVPI?files=1"
  citation: ""
  paper_link: ""
  poster_link: "https://acohen.gitlabpages.inria.fr/impact/impact2019/papers/IMPACT_2019_paper_2.pdf"
  slides_link: ""
  videos_link: ""
  arxiv_link: ""
  
 

# - shortname: ""
#   title: "Exploiting GPU caches By Polyhedral Compilation" 
#   authors: "Abhishek A Patwardhan & Ramakrishna Upadrasta"
#   description: ""
#   year: "2019"
#   publishedAt: "OMASE"
#   project: 0
#   publication: 0
#   type: "Talks"
#   # image: ""  
#   highlight: 1
#   github_link: ""
#   citation: ""
#   paper_link: ""
#   poster_link: ""
#   slides_link: ""
#   videos_link: ""
#   arxiv_link: ""
 
 

- shortname: "p4llvm"
  title: "P4LLVM: An LLVM Based P4 Compiler" 
  short_title: "P4LLVM" 
  authors: "Tharun Kumar Dangeti, S. VenkataKeerthy and Ramakrishna Upadrasta"
  description: ""
  year: "2018"
  publishedAt: "P4WE in ICNP"
  project: 0
  publication: 1
  domain: "SA+Opt"
  type: "Conference"
  # image: ""   
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/P4LLVM"
  citation: "@INPROCEEDINGS{8526847,
  author={Dangeti, Tharun Kumar and Keerthy S., Venkata and Upadrasta, Ramakrishna},
  booktitle={2018 IEEE 26th International Conference on Network Protocols (ICNP)}, 
  title={P4LLVM: An LLVM Based P4 Compiler}, 
  year={2018},
  volume={},
  number={},
  pages={424-429},
  doi={10.1109/ICNP.2018.00059}}"
  paper_link: "https://ieeexplore.ieee.org/document/8526847"
  poster_link: ""
  slides_link: ""
  videos_link: ""
  arxiv_link: ""
  

- shortname: "isl_memory_management"
  title: "ISL Memory Management Using Clang Static Analyzer" 
  authors: "Malhar Thakkar, Ramakrishna Upadrasta"
  description: ""
  year: "2018"
  publishedAt: "US LLVM Dev Meet"
  project: 0
  publication: 1
  type: "Talks"
  # image: ""   
  highlight: 1
  github_link: ""
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: ""
  videos_link: "https://youtu.be/AgHy_4cQzMU"
  arxiv_link: ""
 
   
- shortname: "loop_profiler"
  title: "An LLVM based Loop Profiler"
  short_title: "LLProf" 
  authors: "Shalini Jain, Kamlesh Kumar, Suresh Purini, Dibyendu Das and Ramakrishna Upadrasta"
  description: ""
  year: "2017"
  publishedAt: "US LLVM Dev Meet"
  project: 0
  publication: 1
  domain: "SA+Opt"
  type: "Posters"
  # image: ""    
  highlight: 1
  github_link: "https://github.com/IITH-Compilers/LLVM-Loop-Profiler"
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: "https://llvm.org/devmtg/2017-10/slides/Jain-LLVM%20based%20Loop%20Profiler.pdf"
  videos_link: "https://youtu.be/MKhXpRNekaM"
  arxiv_link: ""
  

- shortname: "optimizing_dl_kernels"
  title: "When Polyhedral Optimizations Meet Deep Learning Kernels"
  short_title: "Optimizing DL Kernels" 
  authors: "Hrishikesh Vaidya, Akilesh B, Abhishek A Patwardhan, Ramakrishna Upadrasta"
  description: ""
  year: "2017"
  publishedAt: "HiPC"
  project: 0
  domain: "Polyhedral"
  publication: 1
  type: "Posters"
  # image: ""  
  award:
      title: "Won best poster award" 
  highlight: 1
  github_link: "" 
  citation: "@unknown{unknown,
  author = {Vaidya, Hrishikesh and Patwardhan, Abhishek and Upadrasta, Ramakrishna and Badrinaaraayanan, Akilesh},
  year = {2017},
  month = {12},
  pages = {},
  title = {When Polyhedral Optimizations Meet Deep Learning Kernels}
  }"
  paper_link: ""
  poster_link: ""
  slides_link: ""
  videos_link: ""
  arxiv_link: ""
  

- shortname: "polly_tensorflow"
  title: "Enabling Polyhedral optimizations in TensorFlow through Polly"
  authors: "Annanay Agarwal, Michael Kruse, Brian Retford, Tobias Grosser and Ramakrishna Upadrasta"
  description: ""
  year: "2017"
  publishedAt: "US LLVM Dev Meet"
  project: 0
  publication: 1
  type: "Talks"
  # image: ""  
  highlight: 1
  github_link: ""
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: "https://llvm.org/devmtg/2017-10/slides/Agarwal-Enabling%20Polyhedral%20optimizations%20in%20TensorFlow%20through%20Polly.pdf"
  videos_link: "https://youtu.be/uq67__tfdtQ"
  arxiv_link: ""

  

- shortname: "loop_distribution_improvement"
  title: "Improved Loop Distribution in LLVM using Polyhedral Dependences"
  authors: "Tharun Kumar Dangeti, Utpal Bora, Santanu Das, Tobias Grosser and Ramakrishna Upadrasta"
  description: ""
  year: "2017"
  publishedAt: "LLVM HPC"
  project: 0
  publication: 1
  type: "Talks"
  # image: ""    
  highlight: 1
  github_link: ""
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: "https://llvm-hpc4-workshop.github.io/talks.html#grosser"
  videos_link: ""
  arxiv_link: ""
 

- shortname: "cache_miss_calc"
  title: "Implementation of a Cache Miss Calculator in LLVM/Polly"
  short_title: "Cache Miss Calculator"
  authors: "Keyur Joshi, Ramakrishna Upadrasta, and Albert Cohen"
  description: ""
  year: "2017"
  publishedAt: "LLVM HPC"
  project: 0
  domain: "Polyhedral"
  publication: 1
  type: "Talks"
  # image: ""   
  highlight: 1
  github_link: ""
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: "https://llvm-hpc4-workshop.github.io/talks.html#joshi"
  videos_link: ""
  arxiv_link: ""
  

- shortname: "texturizing_ppcg"
  title: "Texturizing PPCG: Supporting Texture Memory in a Polyhedral Compiler"
  authors: "Abhishek A Patwardhan & Ramakrishna Upadrasta"
  description: ""
  year: "2016"
  publishedAt: "HiPC"
  project: 0
  publication: 1
  type: "Posters"
  # image: ""  
  award:
     title: "Won best poster award"  
  highlight: 1
  github_link: ""
  citation: "@unknown{unknown,
  author = {Patwardhan, Abhishek and Upadrasta, Ramakrishna},
  year = {2016},
  month = {12},
  pages = {},
  title = {Texturizing PPCG : Supporting Texture Memory in a Polyhedral Compiler}
  }"
  paper_link: ""
  poster_link: ""
  slides_link: ""
  videos_link: ""
  arxiv_link: ""
 

- shortname: "vectorization"
  title: "A Comparative Study of Vectorization in Compilers"
  authors: "Santanu Das, D. Tharun Kumar, Utpal Bora, Ramakrishna Upadrasta"
  description: ""
  year: "2016"
  publishedAt: "HiPC"
  domain: "SA+Opt"
  project: 0
  publication: 1
  type: "Posters"
  # image: ""  
  award:
      title: "Won best poster award"	  
  highlight: 1
  github_link: ""
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: "https://drive.google.com/file/d/1eeNd8hTIcDWJDKQhMb4xNoYcGRcRXq4d/view?usp=sharing"
  videos_link: ""
  arxiv_link: ""
  


- shortname: "analysis_pass-polly"
  title: "Polly as an Analysis pass in LLVM"
  short_title: "Polly as Analysis Pass"
  authors: "Utpal Bora, Johannes Doerfert, Tobias Grosser, Venugopal Raghavan and Ramakrishna Upadrasta"
  description: ""
  year: "2016"
  publishedAt: "US LLVM Dev Meet"
  project: 0
  domain: "Polyhedral"
  publication: 1
  type: "Talks"
  # image: ""   
  highlight: 1
  github_link: ""
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: "https://www.llvm.org/devmtg/2016-11/Slides/Bora-PollyAsAnAnalysisPass.pdf"
  videos_link: ""
  arxiv_link: ""
 

- shortname: "comp_complexity"
  title: "Reducing the Computational Complexity of RegionInfo"
  authors: "Nandini Singhal, Pratik Bhatu, Aditya Kumar, Tobias Grosser, Ramakrishna Upadrasta"
  description: ""
  year: "2016"
  publishedAt: "US LLVM Dev Meet"
  project: 0
  publication: 1
  type: "Talks"
  # image: ""     
  highlight: 1
  github_link: ""
  citation: ""
  paper_link: ""
  poster_link: ""
  slides_link: "https://llvm.org/devmtg/2016-11/Slides/Singhal-ReducingTheComputationalComplexity.pdf"
  videos_link: "https://www.youtube.com/watch?v=yOVeJtA5zxw"
  arxiv_link: ""
 
